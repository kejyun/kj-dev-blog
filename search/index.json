[{"content":"在 Mac 開發 Node.js 軟體通常支援性是比較好的，但如果想在 Windows 開發 Node.js 的話，也可以用 NVM 來管理 Node.js 的版本，可以針對不同的專案需求去做簡單的 Node.js 版本切換\n環境\n Windows 10 x64 node.js 14.17.5\n 安裝 Windows 版本的 nvm-windows 到 GitHub coreybutler/nvm-windows 的 Repo 下載 nvm-setup.zip 檔案並進行安裝，檔案解壓所後照正常的安裝步驟安裝即可\n我這邊使用的是 Windows PowerShell，如果安裝完成後必須要完整的重開 Windows PowerShell，這樣才能夠讓 Windows PowerShell 讀取到對的 NVM 環境變數\n如果是要讓 VS Code 的 Terminal 能夠吃到 NVM 的環境變數，則需要整台電腦重開機才吃的到設定，只重開 VS Code 是沒有用的\n NVM on Windows 10 \n列出可以安裝的 Node.js 版本  nvm list available\n 這邊指令跟 Mac 有點不一樣，不是使用 nvm ls-remote 去列出遠端可以安裝的 Node.js 版本，而是用 nvm list available\nPS C:\\Users\\KJ\u0026gt; nvm list available | CURRENT | LTS | OLD STABLE | OLD UNSTABLE | |--------------|--------------|--------------|--------------| | 16.7.0 | 14.17.5 | 0.12.18 | 0.11.16 | | 16.6.2 | 14.17.4 | 0.12.17 | 0.11.15 | | 16.6.1 | 14.17.3 | 0.12.16 | 0.11.14 | | 16.6.0 | 14.17.2 | 0.12.15 | 0.11.13 | | 16.5.0 | 14.17.1 | 0.12.14 | 0.11.12 | | 16.4.1 | 14.16.1 | 0.12.12 | 0.11.10 | | 16.4.0 | 14.16.0 | 0.12.11 | 0.11.9 | | 16.3.0 | 14.15.5 | 0.12.10 | 0.11.8 | | 16.2.0 | 14.15.4 | 0.12.9 | 0.11.7 | | 16.1.0 | 14.15.3 | 0.12.8 | 0.11.6 | | 16.0.0 | 14.15.2 | 0.12.7 | 0.11.5 | | 15.14.0 | 14.15.1 | 0.12.6 | 0.11.4 | | 15.13.0 | 14.15.0 | 0.12.5 | 0.11.3 | | 15.12.0 | 12.22.5 | 0.12.4 | 0.11.2 | | 15.11.0 | 12.22.4 | 0.12.3 | 0.11.1 | | 15.9.0 | 12.22.2 | 0.12.1 | 0.9.12 | | 15.8.0 | 12.22.1 | 0.12.0 | 0.9.11 | This is a partial list. For a complete list, visit https://nodejs.org/download/release 如果沒有看到自己想要安裝的版本，可以到 Node.js Release 去找自己需要的 Node.js 版本\n安裝 Node.js 14.17.5  nvm install\n 使用 nvm install 去安裝 Node.js 後會出現作業系統版本不符合，我系統是使用 Windows 10 64 bits 的系統，預設安裝的版本是 32 bits 的版本\nPS C:\\Users\\KJ\u0026gt; nvm install 14.17.5 nvm.0.0 Node.js vnvm.0.0 is only available in 32-bit. 要使用 64 bits 版本時，在指令最後方加入 64 的字樣，就可以指定 64 bits 的版本\n nvm install 14.17.5 64\n PS C:\\Users\\KJ\u0026gt; nvm install 14.17.5 64 Downloading node.js version 14.17.5 (64-bit)... Complete Creating C:\\Users\\KJ\\AppData\\Roaming\\nvm\\temp Downloading npm version 6.14.14... Complete Installing npm v6.14.14... Installation complete. If you want to use this version, type nvm use 14.17.5 指定使用 Node.js 版本  nvm use 14.17.5\n 安裝完成後可以使用 nvm use 去指定要使用的 Node.js 版本，在過程中會要求管理者權限去做處理\nNVM 會在環境變數設定 2 個變數 NVM_HOME 及 NVM_SYMLINK，在使用 nvm use 時 NVM 會將指定的 Node.js 版本關連到 NVM_SYMLINK 路徑下，所以需要管理者權限去做關聯存取\n   名稱 設定 說明     NVM_HOME C:\\Users\\KJ\\AppData\\Roaming\\nvm NVM 存放目錄   NVM_SYMLINK C:\\Program Files\\nodejs NVM 軟連結路徑    這樣我們就可以開始在 Windows 10 使用 NVM 去管理 Node.js 版本了\n列出已安裝的 Node.js 版本  nvm list\n PS C:\\Users\\KJ\u0026gt;nvm list 16.7.0 * 14.17.5 (Currently using 64-bit executable) nvm 指令清單 nvm Running version 1.1.7. Usage: nvm arch : Show if node is running in 32 or 64 bit mode. nvm install \u0026lt;version\u0026gt; [arch] : The version can be a node.js version or \u0026#34;latest\u0026#34; for the latest stable version. Optionally specify whether to install the 32 or 64 bit version (defaults to system arch). Set [arch] to \u0026#34;all\u0026#34; to install 32 AND 64 bit versions. Add --insecure to the end of this command to bypass SSL validation of the remote download server. nvm list [available] : List the node.js installations. Type \u0026#34;available\u0026#34; at the end to see what can be installed. Aliased as ls. nvm on : Enable node.js version management. nvm off : Disable node.js version management. nvm proxy [url] : Set a proxy to use for downloads. Leave [url] blank to see the current proxy. Set [url] to \u0026#34;none\u0026#34; to remove the proxy. nvm node_mirror [url] : Set the node mirror. Defaults to https://nodejs.org/dist/. Leave [url] blank to use default url. nvm npm_mirror [url] : Set the npm mirror. Defaults to https://github.com/npm/cli/archive/. Leave [url] blank to default url. nvm uninstall \u0026lt;version\u0026gt; : The version must be a specific version. nvm use [version] [arch] : Switch to use the specified version. Optionally specify 32/64bit architecture. nvm use \u0026lt;arch\u0026gt; will continue using the selected version, but switch to 32/64 bit mode. nvm root [path] : Set the directory where nvm should store different versions of node.js. If \u0026lt;path\u0026gt; is not set, the current root will be displayed. nvm version : Displays the current running version of nvm for Windows. Aliased as v. 參考資料  Releases · coreybutler/nvm-windows · GitHub Windows 10 安裝並使用 nvm 切換 NodeJS 版本 | Welcome.Web.World Node.js v5.4.0 is only available in 32-bit. · Issue #130 · coreybutler/nvm-windows · GitHub 在原生 Windows 上設定 NodeJS | Microsoft Docs [Node.JS] 在 Windows 下使用 nvm 切換 Node 版本 windows - \u0026lsquo;npm\u0026rsquo; is not recognized as internal or external command, operable program or batch file - Stack Overflow Npm Is Not Recognized By Visual Studio  ","date":"2021-08-22T09:51:29+08:00","image":"https://dev.kejyun.com/article/2021/08/nvm-install-node-on-windows-10/cover_huc9235ed498fbb6363f3687f1288de870_86277_120x120_fill_box_smart1_2.png","permalink":"https://dev.kejyun.com/article/2021/08/nvm-install-node-on-windows-10/","title":"在 Windows 使用 nvm 安裝 Node 環境"},{"content":"Gitlab 與 Github 都有提供靜態空間頁面給我們放上靜態的 html, css, js 檔案，可以變成一個靜態頁面供網友存取，但 Github pages 的空間如果要變成私密的方式，不想要讓其他人可以直接下載你整包的網站 html 的話，只能 付費 才能夠有這個功能，Gitlab pages 則是免費就可以使用私密的方式架設你的網站，不需要額外付費\n建立 Gitlab Pages 目錄 在你的專案中建立 public 目錄，並將你要部署到 GitLab Pages 的檔案全部放在這個 public 目錄中，這個目錄的 index.html 是網站的進入點\n GitLab Pages \n設定 Gitlab Pages 部署方式 建立 .gitlab-ci.yml 檔案，在 artifacts 設定 Gitlab pages 的目錄，並設定只有在 main 的分支才會部署\n# .gitlab-ci.ymlimage:alpine:latestpages:stage:deployscript:- echo \u0026#39;Do nothing\u0026#39;# gitlab page 目錄artifacts:paths:- public# 只有在 main 分支的 public 目錄才會被部署only:- main部署 Gitlab Pages 將建立的網站 public 目錄及 .gitlab-ci.yml 檔案 push 到 Gitlab，然後到 Repo 的 CI/CD \u0026gt; Piplines 可以看到會立即執行部署的指令，看到狀態變更為 passed 就表示執行成功了\n GitLab Pages \n檢視部署的 Gitlab Pages 在 Repo 的 Settings \u0026gt; Pages 那邊可以看到你的 Gitlab Pages 的網址，預設是 https://\u0026lt;帳號\u0026gt;.gitlab.io/\u0026lt;專案位置\u0026gt;，從這裡就可以看到你部署上去的頁面了\n GitLab Pages \n設定 Gitlab Pages 存取權限 Gitlab Pages 可以做存取的限制\n Repo 的成員才可以看到此頁面 每個人都可以看到此頁面  GitLab Pages 預設是「Repo 的成員才可以看到此頁面」，若你想要設定 Gitlab 存取權限的話，可以到 Setting \u0026gt; General 頁面，然後在頁面下方的 Visibility, project features, permissions 區塊點選 Expand 展開權限設定\n GitLab Pages   GitLab Pages \n在 Visibility, project features, permissions 下方找到 Pages 區塊，選擇存取的權限按下儲存即可\n Only Project Members Everyone  這樣就可以公開您的 Gitlab Pages 在網路上給大家存取了\n GitLab Pages \n自訂網址 \u0026amp; SSL 憑證 如果你要自訂你網站的網址，可以點選右上方的 New Domain 按鈕，建立頁面網址，在頁面中輸入你要的網址，並請 Gitlab 幫您申請免費的 Let\u0026rsquo;s Encrypt SSL 憑證\n GitLab Pages   GitLab Pages \n建立完成後將 DNS 設定至您的設定內，並做驗證即可，驗證完成後就可以看到您的頁面可以透過自己的網址去連線了\n GitLab Pages \nCloudflare DNS SSL 憑證 若你使用 Cloudflare 做你的 DNS 管理，必須要在 SSL 設定設定為 full 才能夠正確的取得 Gitlab Pages 的免費自訂網址 SSL 網址憑證\n GitLab Pages \n參考資料  GitLab Pages | GitLab Tutorial: Create a GitLab Pages website from scratch | GitLab Exploring GitLab Pages | GitLab  ","date":"2021-08-20T11:51:29+08:00","image":"https://dev.kejyun.com/article/2021/08/gitlab-page-2021/cover_huf9940f3ab2e7673d82e23154b8874ea1_161746_120x120_fill_box_smart1_2.png","permalink":"https://dev.kejyun.com/article/2021/08/gitlab-page-2021/","title":"使用 Gitlab page 建立私密的靜態部落格網站"},{"content":"在 docker 我們會建立自己專案的環境，讓他可以運行我們的專案、看是 php、python、golang \u0026hellip; 之類的運行環境，而專案會需要定期排程去執行指定的程式，以下以 php 為例\n建立自訂 crontab 檔案 在專案下會建立一個 crontab 指令的檔案 my_docker_crontab\n# my_docker_crontab # m h dom mon dow command * * * * * /app/job.php 環境安裝 cron 映像檔通常是最小單位的檔案，所以不會有 cron 的排程程式，所以在建立 Docker 環境時必須要自己指定去安裝 cron 軟體，這樣就可以在我們自己自定義的環境去跑 cron 定期排程去執行程式\nRUN apt-get update \u0026amp;\u0026amp; apt-get install -y cron加入自訂的 crontab 檔案 在 docker 專案下將 crontab 指令的檔案 my_docker_crontab 複製到 docker 的目錄下，並指定 crontab 去執行此 crontab 檔案\n# 加入 docker 專案的自訂 crontabADD my_docker_crontab /etc/cron.d/my_docker_crontab# 指定 crontab 檔案RUN crontab /etc/cron.d/my_docker_crontab執行 crontab 在最後使用指令執行 crontab，這樣就可以開始每分鐘定期執行程式了\n# 執行 crontabCMD [\u0026#34;cron\u0026#34;, \u0026#34;-f\u0026#34;]以下是完整的 Dockerfile 檔案\nFROMphp:7.4-fpmWORKDIR/varRUN apt-get update \u0026amp;\u0026amp; apt-get install -y cron libpq-dev libpng-dev libzip-dev zipRUN docker-php-ext-install pgsql pdo_pgsql gd zip\\ \u0026amp;\u0026amp; docker-php-ext-enable opcache# 加入 docker 專案的自訂 crontabADD my_docker_crontab /etc/cron.d/my_docker_crontab# 指定 crontab 檔案RUN crontab /etc/cron.d/my_docker_crontab# 執行 crontabCMD [\u0026#34;cron\u0026#34;, \u0026#34;-f\u0026#34;]執行 docker-compose 將執行 Dockerfile 的設定寫在 docker-compose.yml 檔案，並執行 docker-compose up -d 將 cronjob 的容器放在背景執行\n# docker-compose.ymlversion:\u0026#39;3\u0026#39;services:cronjob:container_name:docker_php_cronjobbuild:.image:docker_php_cronjob:v1.0volumes:- /web/app/:/apprestart:alwaysdocker-compose up -d 參考資料  cron - docker root crontab job not executing - Stack Overflow laravel-docker-cron/Dockerfile at master · yupmin/laravel-docker-cron Task Scheduling - Laravel - The PHP Framework For Web Artisans 在 Docker 中使用 Laravel schedule | Laravel China 社区  ","date":"2021-08-20T09:51:29+08:00","image":"https://dev.kejyun.com/article/2021/08/docker-crontab/cover_hu5b58a774fb95c4b1932a88dee20e7fbb_142236_120x120_fill_box_smart1_2.png","permalink":"https://dev.kejyun.com/article/2021/08/docker-crontab/","title":"docker crontab 定期排程執行程式"},{"content":"在使用 docker-compose 建立 Docker 時，會去使用 Dockerfile 去建立自己想要的環境，但建立完成後 docker 會自行命名這個 Dockerfile 的 images\nversion:\u0026#39;3\u0026#39;services:cronjob:container_name:dev_cronjobbuild:cron.Dockerfilevolumes:- /web/:/var/webrestart:always$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE dev_cronjob latest 91e20032b3ff 23 minutes ago 502MB 若想要有自己指定的 images 名稱讓我們方便管理的話，可以在 docker-compose.yml 檔案中加入 images 去指定建立完成後的映像檔名稱\n images: \u0026lt;images-name\u0026gt;:\u0026lt;images-version\u0026gt;\n version:\u0026#39;3\u0026#39;services:cronjob:container_name:dev_cronjobbuild:cron.Dockerfileimages:my_cron_image:v1.0volumes:- /web/:/var/webrestart:always這樣使用 docker-compose build 後，就可以在 docker images 看到這個映像檔有他自己的命名了\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE my_cron_image v1.0 91e20032b3ff 23 minutes ago 502MB 參考資料  Compose file version 3 reference | Docker Documentation  ","date":"2021-08-20T09:50:29+08:00","image":"https://dev.kejyun.com/article/2021/08/docker-compose-build-images-name/cover_hu0d4e94c98962ec6b7a6200e33610a675_109897_120x120_fill_box_smart1_2.png","permalink":"https://dev.kejyun.com/article/2021/08/docker-compose-build-images-name/","title":"docker compose build 映像檔名稱"},{"content":"安裝 Oh My Zsh $ sh -c \u0026#34;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; 安裝 Nerd 字型 可以使用 powerlevel10k 推薦的 MesloLGS NF 字型\n MesloLGS NF Regular.ttf MesloLGS NF Bold.ttf MesloLGS NF Italic.ttf MesloLGS NF Bold Italic.ttf  在 Mac 環境將字體下載後，點開檔案按右下方的 Install Font 即可安裝字型\n powerful-terminal-command-line-powerlevel10k \n設定 iTerm2 字形 在 iTerm2 的 preference 中，點選 Profile \u0026gt; Text 頁籤，修改下方的 Font 設定為剛剛安裝的 MesloLGS NF 字型\n powerful-terminal-command-line-powerlevel10k \n下載 powerlevel10k 到 Oh My Zsh 主題中 git clone --depth=1 https://github.com/romkatv/powerlevel10k.git ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k 設定 ZSH 主題為 powerlevel10k/powerlevel10k 修改 ~/.zshrc 檔案，將 ZSH_THEME 改為 powerlevel10k/powerlevel10k\nZSH_THEME=\u0026#34;powerlevel10k/powerlevel10k\u0026#34; 設定 powerlevel10k 在命令列輸入 p10k configure 即可設定您要的主題樣式\np10k configure  powerful-terminal-command-line-powerlevel10k \n設定完成後就可以開始用漂亮的 Termianl 介面了，隨時可以用 p10k configure 變更 Termianl 主題\nHint 在尚未設定 powerlevel10k 時，每次開啟 iTerm2 都會要求設定樣式，若要關閉此提示，可以輸入下方指令關閉\necho \u0026#39;POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD=true\u0026#39; \u0026gt;\u0026gt;! ~/.zshrc 參考資料  GitHub - romkatv/powerlevel10k: A Zsh theme Oh My Zsh - a delightful \u0026amp; open source framework for Zsh GitHub - ryanoasis/nerd-fonts: Iconic font aggregator, collection, \u0026amp; patcher. 3,600+ icons, 50+ patched fonts: Hack, Source Code Pro, more. Glyph collections: Font Awesome, Material Design Icons, Octicons, \u0026amp; more 【分享】Oh My Zsh + powerlevel10k 快速打造好看好用的 command line 環境 | by Holy | Medium  ","date":"2021-08-16T09:50:29+08:00","image":"https://dev.kejyun.com/article/2021/08/powerful-terminal-command-line-powerlevel10k/cover_hu84459e5b4ae7a52bf5b67b42f57bdcae_62099_120x120_fill_box_smart1_2.png","permalink":"https://dev.kejyun.com/article/2021/08/powerful-terminal-command-line-powerlevel10k/","title":"打造漂亮好用的 Terminal by powerlevel10k"},{"content":"Ubuntu 16.04 一開機時，突然出現了下面的訊息，再次重新開機也沒用一樣卡住無限鬼打牆\n Welcome to emergency mode! After logging in, type “journalctl -xb” to view system logs, “systemctl reboot” to reboot, “systemctl default” or ^D to try again boot into default mode. Give root password for maintained (or press Control-D to continue).\n 輸入 root 密碼登入打入 journalctl -xb 檢查開機訊息時，發現在 mount 硬碟時整個卡住，導致系統無法順利啟動\n這個錯誤訊息常發生在載入 外部硬碟、網路硬碟 等沒有載入導致\n解決方式 在 emergency mode 登入 root 帳號後輸入下列指令讓 /etc/fstab 檔案有被寫入的權限\n$ mount -n -o remount,rw / /etc/fstab 是自動 mount 的設定檔案，使用 vi 或 vim 編輯此檔案\n$ sudo vim /etc/fstab 在 /etc/fstab 檔案中將卡住的 mount 硬碟輸入 #  註解掉\n# 註解前 UUID=bcb03e9a-fa15-4a6d-a8ea-ac2c8180654d /data ext4 errors=remount-ro 0 0 # 註解後 # 這一行掛載出現問題，在前方加入註解取消掛載 # UUID=bcb03e9a-fa15-4a6d-a8ea-ac2c8180654d /data ext4 errors=remount-ro 0 0 註解掛載指令後 /etc/fstab 檔案會長的像這樣\n# /etc/fstab: static file system information. # # Use \u0026#39;blkid\u0026#39; to print the universally unique identifier for a # device; this may be used with UUID= as a more robust way to name devices # that works even if disks are added and removed. See fstab(5). # # \u0026lt;file system\u0026gt; \u0026lt;mount point\u0026gt; \u0026lt;type\u0026gt; \u0026lt;options\u0026gt; \u0026lt;dump\u0026gt; \u0026lt;pass\u0026gt; # / was on /dev/sda2 during installation UUID=4fb9f563-7ae4-4df9-a028-fdc6b9e4f1a5 / ext4 errors=remount-ro 0 1 # swap was on /dev/sda3 during installation UUID=cf0cf85a-6fed-4c43-901d-c946d6e1c5fa none swap sw 0 0 # 這一行掛載出現問題，在前方加入註解取消掛載 # UUID=bcb03e9a-fa15-4a6d-a8ea-ac2c8180654d /data ext4 errors=remount-ro 0 0 輸入指令切換成預設模式\n$ systemctl default 重新開機後就可以正常進入系統了\nsystemctl reboot 參考資料  Boot Into Rescue Mode Or Emergency Mode In Ubuntu 20.04 / 18.04 How to exit emergency mode and boot to default mode in Linux | Velan ubuntu啟動出現welcome to emergency mode! Press Enter for maintenance 的檔案。 | 程式前沿 linux出現welcome to emergency mode! 解決方法 - IT閱讀 阿就操場啊~: Linux開機進入emergency mode Linux 开机显示：welcome to emergency mode 的解决方法_Lance的博客-CSDN博客 阿就操場啊~: /etc/fstab的dump與pass  ","date":"2021-08-16T08:50:29+08:00","image":"https://dev.kejyun.com/article/2021/08/welcome-to-emergency-mode-on-ubuntu-1604/cover_hua4338aefb32c666dd4cd0550f2c46c4a_1031986_120x120_fill_box_smart1_2.png","permalink":"https://dev.kejyun.com/article/2021/08/welcome-to-emergency-mode-on-ubuntu-1604/","title":"Welcome to emergency mode on Ubuntu 16.04，無法正確 mount 硬碟"},{"content":"狀況 使用管理者帳號登入 MySQL\nmysql -h localhost -u root -p 在 MySQL Master 機器中輸入 show slave status\\G 檢查 Slave 機器狀態\nmysql\u0026gt; show slave status\\G *************************** 1. row *************************** Slave_IO_State: Master_Host: 192.168.1.2 Master_User: rep Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.155171 Read_Master_Log_Pos: 71744684 Relay_Log_File: master-relay-bin.089272 Relay_Log_Pos: 63995870 Relay_Master_Log_File: mysql-bin.155169 Slave_IO_Running: No Slave_SQL_Running: No Replicate_Do_DB: Replicate_Ignore_DB: mysql Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: mysql.% Last_Errno: 1594 Last_Error: Relay log read failure: Could not parse relay log event entry. The possible reasons are: the master\u0026#39;s binary log is corrupted (you can check this by running \u0026#39;mysqlbinlog\u0026#39; on the binary log), the slave\u0026#39;s relay log is corrupted (you can check this by running \u0026#39;mysqlbinlog\u0026#39; on the relay log), a network problem, or a bug in the master\u0026#39;s or slave\u0026#39;s MySQL code. If you want to check the master\u0026#39;s binary log or slave\u0026#39;s relay log, you will be able to know their names by issuing \u0026#39;SHOW SLAVE STATUS\u0026#39; on this slave. Skip_Counter: 0 Exec_Master_Log_Pos: 63995665 Relay_Log_Space: 182256807 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: NULL Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 1594 Last_SQL_Error: Relay log read failure: Could not parse relay log event entry. The possible reasons are: the master\u0026#39;s binary log is corrupted (you can check this by running \u0026#39;mysqlbinlog\u0026#39; on the binary log), the slave\u0026#39;s relay log is corrupted (you can check this by running \u0026#39;mysqlbinlog\u0026#39; on the relay log), a network problem, or a bug in the master\u0026#39;s or slave\u0026#39;s MySQL code. If you want to check the master\u0026#39;s binary log or slave\u0026#39;s relay log, you will be able to know their names by issuing \u0026#39;SHOW SLAVE STATUS\u0026#39; on this slave. Replicate_Ignore_Server_Ids: Master_Server_Id: 2 Master_UUID: 910223b9-bfbc-11e6-a5cc-f23c91e0377d Master_Info_File: /var/lib/mysql/master.info SQL_Delay: 0 SQL_Remaining_Delay: NULL Slave_SQL_Running_State: Master_Retry_Count: 86400 Master_Bind: Last_IO_Error_Timestamp: Last_SQL_Error_Timestamp: 210806 10:39:01 Master_SSL_Crl: Master_SSL_Crlpath: Retrieved_Gtid_Set: Executed_Gtid_Set: Auto_Position: 0 Replicate_Rewrite_DB: Channel_Name: Master_TLS_Version: 在狀態中發現 Last_SQL_Error 出現以下訊息\n Relay log read failure: Could not parse relay log event entry. The possible reasons are: the master\u0026rsquo;s binary log is corrupted (you can check this by running \u0026lsquo;mysqlbinlog\u0026rsquo; on the binary log), the slave\u0026rsquo;s relay log is corrupted (you can check this by running \u0026lsquo;mysqlbinlog\u0026rsquo; on the relay log), a network problem, or a bug in the master\u0026rsquo;s or slave\u0026rsquo;s MySQL code. If you want to check the master\u0026rsquo;s binary log or slave\u0026rsquo;s relay log, you will be able to know their names by issuing \u0026lsquo;SHOW SLAVE STATUS\u0026rsquo; on this slave.\n 造成錯誤可能原因  網路連線問題 Slave 主機負載過大導致 relay-log 格式錯誤  解決方式 1. 找出已執行的同步節點資訊 在 show slave status\\G 指令中的訊息找到下方資訊\nRelay_Master_Log_File: mysql-bin.155169 # Master 已讀取 Slave 的 binlog 檔案 Exec_Master_Log_Pos: 63995665 # 已執行的指令位置 2. 停止目前 Slave 同步 mysql\u0026gt;stop slave; 3. 重新設定同步位置為上次已執行的節點 mysql\u0026gt;change master to master_log_file=\u0026#39;mysql-bin.155169\u0026#39; , master_log_pos=63995665; 4. 重新啟動 Slave 同步 mysql\u0026gt;start slave; 重新啟動後，MySQL Slave 的同步會從上次已成功執行的節點重新開始同步，會產生新的 binlog，將此節點後續的資料繼續完成同步\n 5. 重新確認目前同步狀況 再一次執行 show slave status\\G 確認同步狀況，在狀態中發現 Last_SQL_Error 已經沒有之前的同步問題了\n然後會看到 Seconds_Behind_Master: 13798 有延遲同步的秒數，表示目前正在同步中\nmysql\u0026gt; show slave status\\G *************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 192.168.1.2 Master_User: rep Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.155171 Read_Master_Log_Pos: 72276030 Relay_Log_File: master-relay-bin.000006 Relay_Log_Pos: 1180855 Relay_Master_Log_File: mysql-bin.155171 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Replicate_Ignore_DB: mysql Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: mysql.% Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 1180650 Relay_Log_Space: 72276478 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: 13798 Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 2 Master_UUID: 910223b9-bfbc-11e6-a5cc-f23c91e0377d Master_Info_File: /var/lib/mysql/master.info SQL_Delay: 0 SQL_Remaining_Delay: NULL Slave_SQL_Running_State: Reading event from the relay log Master_Retry_Count: 86400 Master_Bind: Last_IO_Error_Timestamp: Last_SQL_Error_Timestamp: Master_SSL_Crl: Master_SSL_Crlpath: Retrieved_Gtid_Set: Executed_Gtid_Set: Auto_Position: 0 Replicate_Rewrite_DB: Channel_Name: Master_TLS_Version: 1 row in set (0.00 sec) 在執行一段時間後，可以看到 Seconds_Behind_Master 的延遲秒數變成 0 了，表示同步資料已經完成\nmysql\u0026gt; show slave status\\G ERROR 2006 (HY000): MySQL server has gone away No connection. Trying to reconnect... Connection id: 2589010 Current database: *** NONE *** *************************** 1. row *************************** Slave_IO_State: Waiting for master to send event Master_Host: 192.168.1.2 Master_User: rep Master_Port: 3306 Connect_Retry: 60 Master_Log_File: mysql-bin.155171 Read_Master_Log_Pos: 97568199 Relay_Log_File: master-relay-bin.000006 Relay_Log_Pos: 97568404 Relay_Master_Log_File: mysql-bin.155171 Slave_IO_Running: Yes Slave_SQL_Running: Yes Replicate_Do_DB: Replicate_Ignore_DB: mysql Replicate_Do_Table: Replicate_Ignore_Table: Replicate_Wild_Do_Table: Replicate_Wild_Ignore_Table: mysql.% Last_Errno: 0 Last_Error: Skip_Counter: 0 Exec_Master_Log_Pos: 97568199 Relay_Log_Space: 97568647 Until_Condition: None Until_Log_File: Until_Log_Pos: 0 Master_SSL_Allowed: No Master_SSL_CA_File: Master_SSL_CA_Path: Master_SSL_Cert: Master_SSL_Cipher: Master_SSL_Key: Seconds_Behind_Master: 0 Master_SSL_Verify_Server_Cert: No Last_IO_Errno: 0 Last_IO_Error: Last_SQL_Errno: 0 Last_SQL_Error: Replicate_Ignore_Server_Ids: Master_Server_Id: 2 Master_UUID: 910223b9-bfbc-11e6-a5cc-f23c91e0377d Master_Info_File: /var/lib/mysql/master.info SQL_Delay: 0 SQL_Remaining_Delay: NULL Slave_SQL_Running_State: Slave has read all relay log; waiting for more updates Master_Retry_Count: 86400 Master_Bind: Last_IO_Error_Timestamp: Last_SQL_Error_Timestamp: Master_SSL_Crl: Master_SSL_Crlpath: Retrieved_Gtid_Set: Executed_Gtid_Set: Auto_Position: 0 Replicate_Rewrite_DB: Channel_Name: Master_TLS_Version: 1 row in set (0.00 sec) 參考資料  解决Mysql复制Relay log read failure 的问题_雨中行走的技术博客_51CTO博客 Troubleshooting Relay Log Corruption in MySQL - Percona Database Performance Blog 解决Mysql replication error 1594 - Relay log read failure - Could not parse relay log event entry_叫我酋长好吧-CSDN博客 Mysql replication error 1594 - Relay log read failure - Could not parse relay log event entry  ","date":"2021-08-05T08:50:29+08:00","permalink":"https://dev.kejyun.com/article/2021/08/mysql-replica-master-binary-log-is-corrupted/","title":"MySQL Replica master's binary log is corrupted"}]