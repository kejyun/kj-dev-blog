<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>docker on KJ Dev</title>
    <link>https://dev.kejyun.com/tags/docker/</link>
    <description>Recent content in docker on KJ Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Tue, 24 Aug 2021 09:51:29 +0800</lastBuildDate><atom:link href="https://dev.kejyun.com/tags/docker/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>docker crontab for scheduling running program</title>
      <link>https://dev.kejyun.com/en/article/2021/08/docker-crontab/</link>
      <pubDate>Tue, 24 Aug 2021 09:51:29 +0800</pubDate>
      
      <guid>https://dev.kejyun.com/en/article/2021/08/docker-crontab/</guid>
      <description>We will build the specific environment for running our projects in docker. Such as using PHP, Python, Golang. But sometimes we need to run the specific tasks at a specific time regularly and automatically. We will use crontab to achieve our goal. But what if we want to get the same result on docker? Here is the example by using PHP.
Create custom crontab file Create the custom crontab file in the project that names my_docker_crontab</description>
    </item>
    
    <item>
      <title>docker crontab 定期排程執行程式</title>
      <link>https://dev.kejyun.com/article/2021/08/docker-crontab/</link>
      <pubDate>Fri, 20 Aug 2021 09:51:29 +0800</pubDate>
      
      <guid>https://dev.kejyun.com/article/2021/08/docker-crontab/</guid>
      <description>在 docker 我們會建立自己專案的環境，讓他可以運行我們的專案、看是 php、python、golang &amp;hellip; 之類的運行環境，而專案會需要定期排程去執行指定的程式，以下以 php 為例
建立自訂 crontab 檔案 在專案下會建立一個 crontab 指令的檔案 my_docker_crontab
# my_docker_crontab # m h dom mon dow command * * * * * /app/job.php 環境安裝 cron 映像檔通常是最小單位的檔案，所以不會有 cron 的排程程式，所以在建立 Docker 環境時必須要自己指定去安裝 cron 軟體，這樣就可以在我們自己自定義的環境去跑 cron 定期排程去執行程式
RUN apt-get update &amp;amp;&amp;amp; apt-get install -y cron加入自訂的 crontab 檔案 在 docker 專案下將 crontab 指令的檔案 my_docker_crontab 複製到 docker 的目錄下，並指定 crontab 去執行此 crontab 檔案
# 加入 docker 專案的自訂 crontabADD my_docker_crontab /etc/cron.</description>
    </item>
    
    <item>
      <title>docker compose build 映像檔名稱</title>
      <link>https://dev.kejyun.com/article/2021/08/docker-compose-build-images-name/</link>
      <pubDate>Fri, 20 Aug 2021 09:50:29 +0800</pubDate>
      
      <guid>https://dev.kejyun.com/article/2021/08/docker-compose-build-images-name/</guid>
      <description>在使用 docker-compose 建立 Docker 時，會去使用 Dockerfile 去建立自己想要的環境，但建立完成後 docker 會自行命名這個 Dockerfile 的 images
version:&amp;#39;3&amp;#39;services:cronjob:container_name:dev_cronjobbuild:cron.Dockerfilevolumes:- /web/:/var/webrestart:always$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE dev_cronjob latest 91e20032b3ff 23 minutes ago 502MB 若想要有自己指定的 images 名稱讓我們方便管理的話，可以在 docker-compose.yml 檔案中加入 images 去指定建立完成後的映像檔名稱
 images: &amp;lt;images-name&amp;gt;:&amp;lt;images-version&amp;gt;
 version:&amp;#39;3&amp;#39;services:cronjob:container_name:dev_cronjobbuild:cron.Dockerfileimages:my_cron_image:v1.0volumes:- /web/:/var/webrestart:always這樣使用 docker-compose build 後，就可以在 docker images 看到這個映像檔有他自己的命名了
$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE my_cron_image v1.0 91e20032b3ff 23 minutes ago 502MB 參考資料  Compose file version 3 reference | Docker Documentation  </description>
    </item>
    
  </channel>
</rss>
